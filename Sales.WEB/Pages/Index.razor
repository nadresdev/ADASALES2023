@page "/"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<style type="text/css">
    .card {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        border: 1px solid lightgray;
        box-shadow: 2px 2px 8px 4px #d3d3d3d1;
        border-radius: 15px;
        font-family: sans-serif;
        margin: 5px;
    }
</style>

@if (Products is null)
{
    <div class="spinner" />
}
else
{
   

    

    <div class="row row-cols-1 row-cols-md-4 g-4 mt-1">
        @foreach (var product in Products!)
        {
            <div class="col">
                <div class="card h-100">
                    <div class="text-center zoom">
                        <img src="@product.MainImage" style="height:150px; max-width:200px;" class="text-center" alt=@product.Name />
                    </div>
                    <div class="card-body">
                        <h5 class="card-title text-navy"> @product.Name</h5>
                        <p class="card-text smfnt">@product.Description</p>
                        <h5 class="text-muted">@($"{product.Price:C2}")</h5>
                    </div>
                    <div class="card-footer text-center">
                        <a href="/products/details/@product.Id" class="btn btn-sm btn-secondary"><i class="oi oi-info" /> Detalles</a>
                        <button class="btn btn-sm btn-primary" @onclick=@(() => AddToCartAsync(product.Id))><i class="oi oi-plus" /> Agregar al Carro</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {

    public List<Product>? Products { get; set; }


    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }


    private async Task LoadAsync(int page = 1)
    {



        try
        {
            var responseHppt = await repository.Get<List<Product>>("/api/products");

            Products = responseHppt.Response!;
            
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

   
    private void AddToCartAsync(int productId)
    {

    }
}
