@page "/"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<style type="text/css">
    .card {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        border: 1px solid lightgray;
        box-shadow: 2px 2px 8px 4px #d3d3d3d1;
        border-radius: 15px;
        font-family: sans-serif;
        margin: 5px;
    }
</style>

@if (Products is null)
{
    <div class="spinner" />
}
else
{
    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
        
        
        <AuthorizeView>
            <Authorized>
                @if (counter > 0)
                {
                    <a href="/Orders/ShowCart" class="btn btn-primary">Ver Carro de Compras (@counter)</a>
                }
            </Authorized>
        </AuthorizeView>
    </div>


    

    <div class="row row-cols-1 row-cols-md-4 g-4 mt-1">
        @foreach (var product in Products!)
        {
            <div class="col">
                <div class="card h-100">
                    <div class="text-center zoom">
                        <img src="@product.MainImage" style="height:150px; max-width:200px;" class="text-center" alt=@product.Name />
                    </div>
                    <div class="card-body">
                        <h5 class="card-title text-navy"> @product.Name</h5>
                        <p class="card-text smfnt">@product.Description</p>
                        <h5 class="text-muted">@($"{product.Price:C2}")</h5>
                        <h6 class="text-muted"><p class="card-text smfnt">Disponibles: </p>@($"{product.Stock}")</h6>
                    </div>
                    <div class="card-footer text-center">
                           <a class="btn btn-md  btn-primary" href="/orders/details/@product.Id" > Comprar</a>
                       </div>
                </div>
            </div>
        }
    </div>
}

@code {

    public List<Product>? Products { get; set; }

    private int counter = 0;
    private bool isAuthenticated;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;
    protected async override Task OnParametersSetAsync()
    {
        await CheckIsAuthenticatedAsync();
        await LoadCounterAsync();
    }

    private async Task CheckIsAuthenticatedAsync()
    {
        var authenticationState = await authenticationStateTask;
        isAuthenticated = authenticationState.User.Identity!.IsAuthenticated;
    }

    private async Task LoadCounterAsync()
    {
        if (!isAuthenticated)
        {
            return;
        }

        var responseHttp = await repository.Get<int>("/api/temporalSales/count");
        if (responseHttp.Error)
        {
            return;
        }
        counter = responseHttp.Response;
    }



    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }


    private async Task LoadAsync(int page = 1)
    {



        try
        {
            var responseHppt = await repository.Get<List<Product>>("/api/products");

            Products = responseHppt.Response!;
            
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

   
    

    private async Task AddToCartAsync(int productId)
    {
        if (!isAuthenticated)
        {
            navigationManager.NavigateTo("/Login");
            var toast1 = sweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.TopEnd,
                    ShowConfirmButton = false,
                    Timer = 5000
                });
            await toast1.FireAsync(icon: SweetAlertIcon.Error, message: "Debes haber iniciado sesión para poder agregar productos al carro de compras.");
            return;
        }

        var temporalSaleDTO = new TemporalSaleDTO
            {
                ProductId = productId
            };

        var httpResponse = await repository.Post("/api/temporalSales", temporalSaleDTO);
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await LoadCounterAsync();

        var toast2 = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopEnd,
                ShowConfirmButton = false,
                Timer = 5000
            });
        await toast2.FireAsync(icon: SweetAlertIcon.Success, message: "Producto agregado al carro de compras.");
    }
}

}
