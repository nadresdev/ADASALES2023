@page "/products"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

@if (Products is null)
{
    <div class="spinner" />
}
else
{
    <GenericList MyList="Products">
        <Body>
            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-star"/> Productos
                        <a class="btn btn-sm btn-primary float-end" href="/products/create"><i class="oi oi-plus"/> Nuevo Producto</a>
                    </span>
                </div>
                <div class="card-body">
                  

                   

                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Nombre</th>
                                <th>Descripción</th>
                                <th>Precio</th>
                                <th>Inventario</th>
                                <th>Categorías</th>
                                <th>Imagenes</th>
                                <th>Imagen Principal</th>
                                <th style="width:200px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in Products)
                            {
                                <tr>
                                    <td>
                                        @product.Name
                                    </td>
                                    <td>
                                        @product.Description
                                    </td>
                                    <td>
                                        @($"{product.Price:C2}")
                                    </td>
                                    <td>
                                        @($"{product.Stock:N2}")
                                    </td>
                                    <td>
                                        @product.ProductCategoriesNumber
                                    </td>
                                    <td>
                                        @product.ProductImagesNumber
                                    </td>
                                    <td>
                                        <img src="@product.MainImage" style="width:100px;"/>
                                    </td>
                                    <td>
                                        <a href="/products/edit/@product.Id" class="btn btn-warning"><i class="oi oi-pencil" /> Editar</a>
                                        <button class="btn btn-danger" @onclick=@(() => borrar(product.Id))><i class="oi oi-trash" /> Borrar</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </Body>
    </GenericList>
}

@code {
  

    public List<Product>? Products { get; set; }

   

    

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    

    private async Task LoadAsync(int page = 1)
    {
        

       

        

        try
        {
            var responseHppt = await repository.Get<List<Product>>("/api/products");
           
            Products = responseHppt.Response!;
           
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task borrar(int productId)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        await sweetAlertService.FireAsync("Error", "Borrar no habilitado", SweetAlertIcon.Error);
      /* var responseHTTP = await repository.Delete($"api/products/{productId}");

          if (responseHTTP.Error)
          {
              if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
              {
                  navigationManager.NavigateTo("/");
                  return;
              }

              var mensajeError = await responseHTTP.GetErrorMessageAsync();
              await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
              return;
          }

          await LoadAsync(1);*/
    }

   

   
}
